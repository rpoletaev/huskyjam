// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/backend.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	internal "github.com/rpoletaev/huskyjam/internal"
	auth "github.com/rpoletaev/huskyjam/pkg/auth"
	reflect "reflect"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Accounts mocks base method.
func (m *MockStore) Accounts() internal.AccountsRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Accounts")
	ret0, _ := ret[0].(internal.AccountsRepository)
	return ret0
}

// Accounts indicates an expected call of Accounts.
func (mr *MockStoreMockRecorder) Accounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockStore)(nil).Accounts))
}

// Goods mocks base method.
func (m *MockStore) Goods() internal.GoodsRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Goods")
	ret0, _ := ret[0].(internal.GoodsRepository)
	return ret0
}

// Goods indicates an expected call of Goods.
func (mr *MockStoreMockRecorder) Goods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Goods", reflect.TypeOf((*MockStore)(nil).Goods))
}

// MockKVStore is a mock of KVStore interface.
type MockKVStore struct {
	ctrl     *gomock.Controller
	recorder *MockKVStoreMockRecorder
}

// MockKVStoreMockRecorder is the mock recorder for MockKVStore.
type MockKVStoreMockRecorder struct {
	mock *MockKVStore
}

// NewMockKVStore creates a new mock instance.
func NewMockKVStore(ctrl *gomock.Controller) *MockKVStore {
	mock := &MockKVStore{ctrl: ctrl}
	mock.recorder = &MockKVStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVStore) EXPECT() *MockKVStoreMockRecorder {
	return m.recorder
}

// Tokens mocks base method.
func (m *MockKVStore) Tokens() internal.TokensRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tokens")
	ret0, _ := ret[0].(internal.TokensRepository)
	return ret0
}

// Tokens indicates an expected call of Tokens.
func (mr *MockKVStoreMockRecorder) Tokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tokens", reflect.TypeOf((*MockKVStore)(nil).Tokens))
}

// MockAccountsRepository is a mock of AccountsRepository interface.
type MockAccountsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsRepositoryMockRecorder
}

// MockAccountsRepositoryMockRecorder is the mock recorder for MockAccountsRepository.
type MockAccountsRepositoryMockRecorder struct {
	mock *MockAccountsRepository
}

// NewMockAccountsRepository creates a new mock instance.
func NewMockAccountsRepository(ctrl *gomock.Controller) *MockAccountsRepository {
	mock := &MockAccountsRepository{ctrl: ctrl}
	mock.recorder = &MockAccountsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountsRepository) EXPECT() *MockAccountsRepositoryMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockAccountsRepository) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockAccountsRepositoryMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockAccountsRepository)(nil).Init))
}

// Create mocks base method.
func (m *MockAccountsRepository) Create(a *internal.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", a)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountsRepositoryMockRecorder) Create(a interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountsRepository)(nil).Create), a)
}

// GetByEmail mocks base method.
func (m *MockAccountsRepository) GetByEmail(email string) (*internal.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*internal.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockAccountsRepositoryMockRecorder) GetByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockAccountsRepository)(nil).GetByEmail), email)
}

// MockGoodsRepository is a mock of GoodsRepository interface.
type MockGoodsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGoodsRepositoryMockRecorder
}

// MockGoodsRepositoryMockRecorder is the mock recorder for MockGoodsRepository.
type MockGoodsRepositoryMockRecorder struct {
	mock *MockGoodsRepository
}

// NewMockGoodsRepository creates a new mock instance.
func NewMockGoodsRepository(ctrl *gomock.Controller) *MockGoodsRepository {
	mock := &MockGoodsRepository{ctrl: ctrl}
	mock.recorder = &MockGoodsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGoodsRepository) EXPECT() *MockGoodsRepositoryMockRecorder {
	return m.recorder
}

// Init mocks base method.
func (m *MockGoodsRepository) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockGoodsRepositoryMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockGoodsRepository)(nil).Init))
}

// CreateCategory mocks base method.
func (m *MockGoodsRepository) CreateCategory(c *internal.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockGoodsRepositoryMockRecorder) CreateCategory(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockGoodsRepository)(nil).CreateCategory), c)
}

// UpdateCategory mocks base method.
func (m *MockGoodsRepository) UpdateCategory(c *internal.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockGoodsRepositoryMockRecorder) UpdateCategory(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockGoodsRepository)(nil).UpdateCategory), c)
}

// DeleteCategory mocks base method.
func (m *MockGoodsRepository) DeleteCategory(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockGoodsRepositoryMockRecorder) DeleteCategory(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockGoodsRepository)(nil).DeleteCategory), id)
}

// ListCategories mocks base method.
func (m *MockGoodsRepository) ListCategories() ([]*internal.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories")
	ret0, _ := ret[0].([]*internal.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockGoodsRepositoryMockRecorder) ListCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockGoodsRepository)(nil).ListCategories))
}

// CreateGood mocks base method.
func (m *MockGoodsRepository) CreateGood(c *internal.Good) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGood", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGood indicates an expected call of CreateGood.
func (mr *MockGoodsRepositoryMockRecorder) CreateGood(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGood", reflect.TypeOf((*MockGoodsRepository)(nil).CreateGood), c)
}

// UpdateGood mocks base method.
func (m *MockGoodsRepository) UpdateGood(c *internal.Good) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGood", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGood indicates an expected call of UpdateGood.
func (mr *MockGoodsRepositoryMockRecorder) UpdateGood(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGood", reflect.TypeOf((*MockGoodsRepository)(nil).UpdateGood), c)
}

// DeleteGood mocks base method.
func (m *MockGoodsRepository) DeleteGood(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGood", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGood indicates an expected call of DeleteGood.
func (mr *MockGoodsRepositoryMockRecorder) DeleteGood(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGood", reflect.TypeOf((*MockGoodsRepository)(nil).DeleteGood), id)
}

// GoodsByCategory mocks base method.
func (m *MockGoodsRepository) GoodsByCategory(catID uint) ([]*internal.Good, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoodsByCategory", catID)
	ret0, _ := ret[0].([]*internal.Good)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GoodsByCategory indicates an expected call of GoodsByCategory.
func (mr *MockGoodsRepositoryMockRecorder) GoodsByCategory(catID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoodsByCategory", reflect.TypeOf((*MockGoodsRepository)(nil).GoodsByCategory), catID)
}

// MockTokensRepository is a mock of TokensRepository interface.
type MockTokensRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTokensRepositoryMockRecorder
}

// MockTokensRepositoryMockRecorder is the mock recorder for MockTokensRepository.
type MockTokensRepositoryMockRecorder struct {
	mock *MockTokensRepository
}

// NewMockTokensRepository creates a new mock instance.
func NewMockTokensRepository(ctrl *gomock.Controller) *MockTokensRepository {
	mock := &MockTokensRepository{ctrl: ctrl}
	mock.recorder = &MockTokensRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokensRepository) EXPECT() *MockTokensRepositoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockTokensRepository) New(claims *auth.SystemClaims) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", claims)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockTokensRepositoryMockRecorder) New(claims interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockTokensRepository)(nil).New), claims)
}

// Get mocks base method.
func (m *MockTokensRepository) Get(token string) (*auth.SystemClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", token)
	ret0, _ := ret[0].(*auth.SystemClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTokensRepositoryMockRecorder) Get(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTokensRepository)(nil).Get), token)
}

// Delete mocks base method.
func (m *MockTokensRepository) Delete(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTokensRepositoryMockRecorder) Delete(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTokensRepository)(nil).Delete), token)
}
